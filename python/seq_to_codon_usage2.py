from collections import defaultdict

codon_table = {
    "TTT": "Phe", "TTC": "Phe", "TTA": "Leu", "TTG": "Leu",
    "CTT": "Leu", "CTC": "Leu", "CTA": "Leu", "CTG": "Leu",
    "ATT": "Ile", "ATC": "Ile", "ATA": "Ile", "ATG": "Met",
    "GTT": "Val", "GTC": "Val", "GTA": "Val", "GTG": "Val",
    "TCT": "Ser", "TCC": "Ser", "TCA": "Ser", "TCG": "Ser",
    "CCT": "Pro", "CCC": "Pro", "CCA": "Pro", "CCG": "Pro",
    "ACT": "Thr", "ACC": "Thr", "ACA": "Thr", "ACG": "Thr",
    "GCT": "Ala", "GCC": "Ala", "GCA": "Ala", "GCG": "Ala",
    "TAT": "Tyr", "TAC": "Tyr", "TAA": "End", "TAG": "End",
    "CAT": "His", "CAC": "His", "CAA": "Gln", "CAG": "Gln",
    "AAT": "Asn", "AAC": "Asn", "AAA": "Lys", "AAG": "Lys",
    "GAT": "Asp", "GAC": "Asp", "GAA": "Glu", "GAG": "Glu",
    "TGT": "Cys", "TGC": "Cys", "TGA": "End", "TGG": "Trp",
    "CGT": "Arg", "CGC": "Arg", "CGA": "Arg", "CGG": "Arg",
    "AGT": "Ser", "AGC": "Ser", "AGA": "Arg", "AGG": "Arg",
    "GGT": "Gly", "GGC": "Gly", "GGA": "Gly", "GGG": "Gly"
}

def count_codons(seq):
    counts = defaultdict(int)
    for i in range(0, len(seq) - 2, 3):
        codon = seq[i:i+3].upper()
        if codon in codon_table:
            counts[codon] += 1

    # Fill in missing codons with 0 count
    for codon in codon_table:
        if codon not in counts:
            counts[codon] = 0

    return counts

def format_codon_usage(counts):
    total_codons = sum(counts.values())
    aa_totals = defaultdict(int)

    for codon, count in counts.items():
        aa = codon_table[codon]
        aa_totals[aa] += count

    data = []
    for codon in sorted(codon_table):
        aa = codon_table[codon]
        count = counts[codon]
        pct_total = (count / total_codons * 100) if total_codons > 0 else 0
        pct_aa = (count / aa_totals[aa]) if aa_totals[aa] > 0 else 0
        data.append((aa, codon, count, pct_total, pct_aa))

    # Sort alphabetically by amino acid
    return sorted(data, key=lambda x: (x[0], x[1]))

def print_codon_table(data):
    print(f"{'AA':<6}{'Codon':<6}{'Count':>8}{'%Total':>8}{'%AA':>8}")
    for aa, codon, count, pct_total, pct_aa in data:

        print(f"{{aa: '{aa}', codon: '{codon}', usage: {pct_aa:.2f}}},")

if __name__ == "__main__":

    #real:
    dna_sequence = "ATGGTCGAAAATAGTACGCAGAAGGCCCCACATGCCGGAAATGATGATAATAGCTCTACCAAGCCATATTCGGAGGCGTTTTTCTTAGGGTTCAATAACCCAACGCCTGGATTAGAAGCTGAGCACTCAAGCACATCGCCTGCCCCCGAGAACTCCGAAACACATAATAGGAAAAGAAATAGAATATTGTTTGTCTGCCAGGCTTGTAGGAAGTCAAAAACAAAGTGTGATAGAGAAAAACCTGAATGTGGTCGATGCGTCAAGCATGGGTTAAAATGTGTTTATGACGTATCAAAACAGCCAGCACCACGAATTCCGAGTAAAGACGCCATTATATCAAGGTTGGAAAAAGATATGTTTTATTGGAAAGATAAAGCTATGAAGCTACTAACAGAGAGAGAGGTGAATGAATCAGGCAAGAGATCAGCAAGTCCGATCAATACAAACAATGCTAGCGGGGACAGTCCTGATACCAAGAAGCAGCATAAAATGGAACCTATATATGAACAAAGTGGTAACGGGGATATAAACAATGGTACCAGAAATGATATTGAAATCAACTTGTATAGAAGTCATCCAACCATGATCATGAGTAAAGTCATGAAAAGAGAAGTTAAGCCGTTATCTGAAAATTATATTATAATTCAGGACTGTTTTCTAAAAATCCTGGTCACTTCAGTGTTCCTTGACACTTCAAAGAACACGATGATACCGGCATTGACGGCAAACGCGAATATTACAAGAGCCCAGCCTAGCGTAGCAAATAACCTTTTGAAATTGAAGGAAATGCTAATCAGACAGTGTCAAACCGAAGATGAAAAAAATCGTGTAAACGAATTCACTGATAGAATACTACAAAATACAAATTCAAATAGAAACTTGAAAATCGGTATGCTATTATCAATGCTTTACAATTCTGTCGGTTACCAATATCTGGAGGATCATTGCCCTCAAGGTGGCGAATATTCGGATTTATTGAGAAATTTGATCAATGAATGTGAAGCTATTTTGCCATCTTACGAAATTATTGAACGCTACAAGAACCACTTTTATGAGTACGTTTATCCAAGTCTACCTTTCATCGAATTAGAAATTTTTGAAGAATCATTAAGTCAAACAATTTTTCCGGACCCAAACAACCCCTCCAAGGTGCAAATACGTATGGGTAGCACACATTTGAGAGCTAAGGTGGAAAACTTGAGTCTTCTATTGGTTATCTTGAAACTCTCATACATGTCAATAAGGTTTTTAGATCATAGTACAGCAGACTCGAGTTTTTATCTTTCAAAGGAAATAATTGATAAATACCCAATACCGAACGATTTTATTTTATTGAGTCAAAGATGTCTAGCATCGGAAAATTGGTGTGCATGCGCTAATGAAAACATCATATCATGTTTACTATATATCTGGTCTTTTTTTGCTTTTTCTCCTGAAGAGGGTGATTTCTTTCTCGAGCACCCCACCGATGTTATCAGTAGTTTGATAATGATGCTTTCCACCTCGATTGGTCTCCACAGAGATCCTTCAGATTTCCCTCAATTGATTTCCCCGTCCACCTCAGATAAAAGAACCTTGAATCACAGAAGAATACTCTGGTTGAGTATCGTTACCGTTTGTTCGTTTGAAGCAAGTCTCAAAGGTAGACATTCTGTCTCACCGATATCTTTAATGGCCTTATTCCTAAATATTAAGGATCCTGATTCTCTGACGGTATATATGAACCGAGTTAGGGGCGATCTAAGCGATATCAATAATCACAAACTTTTGAGAATTCATAAATTTACATTCAAGAGAGCCCAGCTTGCGTTACTCCTGTCGGACTTAGATAACTTGACGATGACATACTATGGTAGTTTCCATTTGCATTCAATTGAATTCATAAGAGAAAAGATTGAGATTTTTGTGGAGGAAAACTTTCCCATAGTACCATTAAAAAGTGTCGCACAGGATAAGTCAGACCTTGATGACATGAATGTGATTTCAGAAATGAATATATTATCTTCAGAAAATTCTTCTTCATTTCACAATCGAATAATGAATAAACTATTGATGTTGAGAACTTCAATGGCCGTATTCTTGCATTTTGAAACACTTATCACTAAGGATAAAAGTATCTTCCCATTCTACAAGAAATACTTTATGGTTAGCTGTATGGATGCGTTGTCACTAATAAATTATTTCAATAAGTTTTTCAACGGAGAATATCGACACGCAATATCTTCTTTAACCAGTTTTAATGTTACAAAATTTATTCAGTTAGCACTATCCAGCACAATCTTCAGCCTATTAGGGATTATACTAAGAATAGGTTTAGCCATCCATATGTTATCTTCTGAAGTACAAAAGTTATCGGGAACGACAGATCCAAGAATAAAGGAGTTAAATACCAAAGTCGAAAAATTTAGTACCCTGCAAAGAGATCTCGAGTCTGCTTTAGAAGGTATATATTGCTCTGCTTCGGAACATTTAAGATTCACATACTTCCCCGTTTTTAAGATGTTGGCTTTATTCGATGTCATTGTACAAAGGATGAGAAAGGGTGAATTATGGCACGGCATATTTACGATGATTCAAATGGAACAAATGCATTCTAGGATAATCAAGACATTAAGCATTACCTTAGGAGTCAAACTGGACAAAAAGGATAGGCTATTAGAGGAATTGATGGCATGCAATCACGTTGCGAATTTTAGCGTTGAAGATATAGATGAGCTGAACCGTAATATCAAAAAAGAGATTCAAATTTCTTCAGGATTGAAGCCGCCTGTAAACACAATTGACTTAACCAACGGCGAACCATTCGGAAATGCTGTTCCTACCTTCACAAAGACATGGAGTTCATCCTTAGATAATTTAGAAAAACTATCATCGGCCGCTGCAGTTGGTCAGAGCTTGGACTACAACAGTGGTTTACGTCAGGGTCCTTTGGCGGGTGGTGGTTCAAAAGAGCAAACGCCAATAGCCGGGATGAATAACTTGAACAATTCAATCAATGCTACACCAATTGTCGATAACTCATCTGGATCACAACTTCCTAATGGTTTCGATAGAGGCCAAGCGAATAATACTCCTTTTCCAGGTTATTTTGGAGGTTTGGATTTATTTGATTATGACTTTTTGTTTGGCAATGACTTTGCTTAA"
    codon_counts = count_codons(dna_sequence)
    codon_data = format_codon_usage(codon_counts)
    print_codon_table(codon_data)
